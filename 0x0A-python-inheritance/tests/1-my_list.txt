"""
This is the "1-my_list" module.
===================================

>>> print(__import__('1-my_list').MyList.__doc__)
subclass to add methods to list class

Check print_sorted with empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

Check that negative numbers may be added to list
>>> my_list = MyList()
>>> my_list.append(-1)
>>> my_list.append(-4)
>>> my_list.append(-2)
>>> my_list.append(-3)
>>> my_list.append(-5)
>>> print(my_list)
[-1, -4, -2, -3, -5]

Check that sorted list of negative numbers may be printed
>>> my_list.print_sorted()
[-5, -4, -3, -2, -1]


Check that pre-sorted list is printed correctly with print_sorted
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.print_sorted()
[1, 2, 3]

Check that list printed correctly
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]

Check that object can be created
>>> my_list = MyList()
>>> my_list
[]

Printing sorted list of integers and strings should throw error
>>> my_list = MyList()
>>> my_list.append("Milo")
>>> my_list.append(7)
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: unorderable types: int() < str()

Add strings
>>> my_list = MyList()
>>> my_list.append("Milo")
>>> print(my_list)
['Milo']

Changing an element in object works
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list[0] = (2)
>>> print(my_list)
[2]

Check that passing in more than 1 list throws an error
>>> my_list = MyList([1, 2], [3, 4])
Traceback (most recent call last):
TypeError: list() takes at most 1 argument (2 given)

