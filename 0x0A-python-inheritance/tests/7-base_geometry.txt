
This is the "7-my_list" module.
===================================

>>> print(__import__('7-base_geometry').BaseGeometry.__doc__)
Geometry class with maths operations

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	...
ValueError: age must be greater than 0


>>> bg.integer_validator("name", "Camila")
Traceback (most recent call last):
	...
TypeError: name must be an integer


>>> bg.integer_validator("distance", -8)
Traceback (most recent call last):
        ...
ValueError: distance must be greater than 0


>>> bg1 = BaseGeometry()
>>> print(bg1.area())
Traceback (most recent call last):
    ...
Exception: area() is not implemented


>>> bg1.integer_validator("Camila", )
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'


>>> bg1.integer_validator(, 14)
Traceback (most recent call last):
    ...
SyntaxError: invalid syntax


>>> bg1.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


>>> bg1.integer_validator("Camila", 32, 4)
Traceback (most recent call last):
    ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given


>>> bg.integer_validator("none", None)
Traceback (most recent call last):
...
TypeError: none must be an integer

>>> bg = BaseGeometry()
>>> bg.integer_validator("int", 4)

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented


>>> bg.integer_validator("int", -8)
Traceback (most recent call last):
...
ValueError: int must be greater than 0


>>> bg.integer_validator("int", 0)
Traceback (most recent call last):
...
ValueError: int must be greater than 0

>>> bg.integer_validator("float", 1.23)
Traceback (most recent call last):
...
TypeError: float must be an integer

>>> bg.integer_validator("bool", False)
Traceback (most recent call last):
...
TypeError: bool must be an integer


>>> bg.integer_validator("tuple", (4, 5))
Traceback (most recent call last):
...
 TypeError: tuple must be an integer

>>> bg.integer_validator("string", "Mila")
Traceback (most recent call last):
...
TypeError: string must be an integer

>>> bg.integer_validator("list", [5, 6, 7])
Traceback (most recent call last):
...
TypeError: list must be an integer

>>> bg.integer_validator("set", {"Camila", "Cabello", "Karla"})
Traceback (most recent call last):
...
TypeError: set must be an integer
